import { readdir, writeFile } from 'fs/promises'
import { join, relative, extname, basename, dirname } from 'path'

async function getFiles(dir: string): Promise<string[]> {
  const entries = await readdir(dir, { withFileTypes: true })
  const files = await Promise.all(
    entries.map(entry => {
      const res = join(dir, entry.name)
      return entry.isDirectory() ? getFiles(res) : Promise.resolve(res)
    }),
  )
  return files.flat()
}

async function main() {
  const publicDir = join(process.cwd(), 'public', 'assets', 'images')
  const commissionDir = join(publicDir, 'commission')
  const photographyDir = join(publicDir, 'photography')

  const commissionFiles = await getFiles(commissionDir)
  const photographyFiles = await getFiles(photographyDir)

  const all = [
    ...commissionFiles.map(path => ({ type: 'commission', path })),
    ...photographyFiles.map(path => ({ type: 'photography', path })),
  ]

  all.sort((a, b) => a.path.localeCompare(b.path))

  const importLines: string[] = []
  const mappingLines: string[] = []

  all.forEach((file, index) => {
    const rel = relative(join(process.cwd(), 'src', 'data'), file.path).replace(/\\/g, '/')
    let key = ''
    if (file.type === 'commission') {
      key = basename(file.path, extname(file.path))
    } else {
      const parent = dirname(file.path)
      if (parent === photographyDir) {
        key = basename(file.path, extname(file.path))
      } else {
        const folder = basename(parent)
        key = `${folder}_${basename(file.path, extname(file.path))}`
      }
    }
    const varName = `img${index}`
    importLines.push(`import ${varName} from '${rel}'`)
    mappingLines.push(`  '${key}': ${varName},`)
  })

  const content = `// This file is auto-generated by the script at src/scripts/generateImageImports.ts
// !!! DO NOT EDIT !!!
${importLines.join('\n')}

export const imageImports = {
${mappingLines.join('\n')}
} as const
`

  await writeFile(join(process.cwd(), 'src', 'data', 'imageImports.ts'), content)
}

main().catch(err => {
  console.error(err)
  process.exit(1)
})
